{"ast":null,"code":"var _jsxFileName = \"/Users/bhanu/Documents/nutritracker_react/nutritracker/src/components/TokenContext.js\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TokenContext = /*#__PURE__*/createContext();\nexport const TokenProvider = ({\n  children\n}) => {\n  // const [isLoggedIn,setIsLoggedIn]=useState(false)\n  // const [token, setToken] = useState(null);\n  // const [userId,setUserId]=useState(null);\n  // const [loggedInUserName, setLoggedInUsername]=useState(null);\n  // const [csrfToken, setCsrfToken] = useState('');\n\n  // useEffect(() => {\n  //   axios.get('http://localhost:8080/api/csrf/getCsrfToken').then(response => {\n  //     setCsrfToken(response.data.token);\n  //     console.log(\"csrf->\",response)\n  //   });\n  // }, []);\n\n  const logout = () => {\n    localStorage.setItem('isLoggedIn', false);\n    localStorage.setItem('token', null);\n  };\n  const login = async (userName, password) => {\n    let newToken = \"Basic \" + window.btoa(userName + ':' + password);\n    try {\n      const response = await axios.post('http://localhost:8080/login', new URLSearchParams({\n        username: userName,\n        password: password\n      }), {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      console.log('response', response);\n      if (response.status === 200) {\n        // const userIdResponse = await axios.get('http://localhost:8080/api/user', {\n        //   params:{\n        //     userName: userName\n        //   },\n        //   headers: {\n        //     Authorization: newToken\n        //   }\n        // });\n        // console.log(\"User response ->\",userIdResponse)\n        // setUserId(userIdResponse.data)\n        localStorage.setItem('token', newToken);\n        localStorage.setItem('isLoggedIn', true);\n        localStorage.setItem('userName', userName);\n        localStorage.setItem('userId', response.data.userId);\n      }\n    } catch (error) {\n      console.error('Login failed:', error);\n      newToken = null;\n    }\n    return newToken;\n  };\n  const searchByFoodName = async foodName => {\n    try {\n      const response = await axios.get('http://localhost:8080/api/foods/search', {\n        params: {\n          foodName: foodName\n        },\n        headers: {\n          Authorization: token\n        }\n      });\n      console.log('response -> data -> ', response.data);\n      if (response.status === 200) {\n        return response;\n      }\n    } catch (error) {\n      console.error('search failed:', error);\n      return 0;\n    }\n  };\n  const getFoodNutritionDetails = async food => {\n    try {\n      const response = await axios.get('http://localhost:8080/api/foods/searchFoodNutrientById', {\n        params: {\n          fdcId: food.fdcId\n        },\n        headers: {\n          Authorization: token\n        }\n      });\n      console.log('response -> data -> ', response.data);\n      if (response.status === 200) {\n        return response;\n      }\n    } catch (error) {\n      console.error('getting details failed:', error);\n      return 0;\n    }\n  };\n  const logFoodNutritionDetails = async logEntry => {\n    try {\n      const response = await axios.post('http://localhost:8080/api/dailyIntake/create', logEntry, {\n        headers: {\n          Authorization: token\n        }\n      });\n      console.log('response -> data -> ', response.data);\n      if (response.status === 200) {\n        return response;\n      }\n    } catch (error) {\n      console.error('logging food nutrition failed:', error);\n      return 0;\n    }\n  };\n  const getNutritionLogByDate = async date => {\n    try {\n      const response = await axios.get('http://localhost:8080/api/dailyIntake/getLog', {\n        params: {\n          userId: userId,\n          date: date\n        },\n        headers: {\n          Authorization: token\n        }\n      });\n      console.log('response -> data -> ', response.data);\n      if (response.status === 200) {\n        return response;\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.error('getting nutrition log details failed:', error);\n      return null;\n    }\n  };\n  const getFoodByDate = async date => {\n    try {\n      const response = await axios.get('http://localhost:8080/api/dailyIntake/getFoodByDate', {\n        params: {\n          userId: userId,\n          date: date\n        },\n        headers: {\n          Authorization: token\n        }\n      });\n      console.log('response -> data -> ', response.data);\n      if (response.status === 200) {\n        return response;\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.error('getting Food log details failed:', error);\n      return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(TokenContext.Provider, {\n    value: {\n      token,\n      login,\n      isLoggedIn,\n      setIsLoggedIn,\n      logout,\n      searchByFoodName,\n      getFoodNutritionDetails,\n      userId,\n      logFoodNutritionDetails,\n      getNutritionLogByDate,\n      loggedInUserName,\n      getFoodByDate\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_c = TokenProvider;\nexport default TokenContext;\nvar _c;\n$RefreshReg$(_c, \"TokenProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","TokenContext","TokenProvider","children","logout","localStorage","setItem","login","userName","password","newToken","window","btoa","response","post","URLSearchParams","username","headers","console","log","status","data","userId","error","searchByFoodName","foodName","get","params","Authorization","token","getFoodNutritionDetails","food","fdcId","logFoodNutritionDetails","logEntry","getNutritionLogByDate","date","getFoodByDate","Provider","value","isLoggedIn","setIsLoggedIn","loggedInUserName","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bhanu/Documents/nutritracker_react/nutritracker/src/components/TokenContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TokenContext = createContext();\n\nexport const TokenProvider = ({ children }) => {\n  // const [isLoggedIn,setIsLoggedIn]=useState(false)\n  // const [token, setToken] = useState(null);\n  // const [userId,setUserId]=useState(null);\n  // const [loggedInUserName, setLoggedInUsername]=useState(null);\n  // const [csrfToken, setCsrfToken] = useState('');\n\n  // useEffect(() => {\n  //   axios.get('http://localhost:8080/api/csrf/getCsrfToken').then(response => {\n  //     setCsrfToken(response.data.token);\n  //     console.log(\"csrf->\",response)\n  //   });\n  // }, []);\n\n\n  const logout=() =>{\n    localStorage.setItem('isLoggedIn', false);\n    localStorage.setItem('token', null);\n  }\n\n  const login = async (userName, password) => {\n    let newToken = \"Basic \" + window.btoa(userName + ':' + password);\n    try {\n      const response = await axios.post('http://localhost:8080/login', new URLSearchParams({\n        username: userName,\n        password: password\n      }), {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      console.log('response', response);\n      if (response.status === 200) {\n        // const userIdResponse = await axios.get('http://localhost:8080/api/user', {\n        //   params:{\n        //     userName: userName\n        //   },\n        //   headers: {\n        //     Authorization: newToken\n        //   }\n        // });\n        // console.log(\"User response ->\",userIdResponse)\n        // setUserId(userIdResponse.data)\n        localStorage.setItem('token', newToken);\n        localStorage.setItem('isLoggedIn', true);\n        localStorage.setItem('userName', userName);\n        localStorage.setItem('userId', response.data.userId);\n      }\n    } catch (error) {\n      console.error('Login failed:', error);\n      newToken=null\n    }\n    return newToken;\n  };\n\n  const searchByFoodName = async (foodName) => {\n    try {\n      const response = await axios.get('http://localhost:8080/api/foods/search', {\n        params: {\n          foodName: foodName\n        },\n        headers: {\n          Authorization: token\n        }\n      });\n      console.log('response -> data -> ', response.data);\n      if (response.status === 200) {\n        return response;\n      }\n    } catch (error) {\n      console.error('search failed:', error);\n      return 0;\n    }\n  };\n\n  const getFoodNutritionDetails = async (food) => {\n    try {\n      const response = await axios.get('http://localhost:8080/api/foods/searchFoodNutrientById', {\n        params: {\n          fdcId: food.fdcId\n        },\n        headers: {\n          Authorization: token\n        }\n      });\n      console.log('response -> data -> ', response.data);\n      if (response.status === 200) {\n        return response;\n      }\n    } catch (error) {\n      console.error('getting details failed:', error);\n      return 0;\n    }\n  };\n\n  const logFoodNutritionDetails = async (logEntry) => {\n    try {\n      const response = await axios.post('http://localhost:8080/api/dailyIntake/create',\n        logEntry\n      , {\n        headers: {\n          Authorization: token\n        }\n      });\n      console.log('response -> data -> ', response.data);\n      if (response.status === 200) {\n        return response;\n      }\n    } catch (error) {\n      console.error('logging food nutrition failed:', error);\n      return 0;\n    }\n  };\n\n\n  const getNutritionLogByDate = async (date) => {\n    try {\n      const response = await axios.get('http://localhost:8080/api/dailyIntake/getLog', {\n        params: {\n          userId: userId,\n          date:date\n        },\n        headers: {\n          Authorization: token\n        }\n      });\n      console.log('response -> data -> ', response.data);\n      if (response.status === 200) {\n        return response;\n      }\n      else{\n        return null;\n      }\n    } catch (error) {\n      console.error('getting nutrition log details failed:', error);\n      return null;\n    }\n  };\n\n  const getFoodByDate = async (date) => {\n    try {\n      const response = await axios.get('http://localhost:8080/api/dailyIntake/getFoodByDate', {\n        params: {\n          userId: userId,\n          date:date\n        },\n        headers: {\n          Authorization: token\n        }\n      });\n      console.log('response -> data -> ', response.data);\n      if (response.status === 200) {\n        return response;\n      }\n      else{\n        return null;\n      }\n    } catch (error) {\n      console.error('getting Food log details failed:', error);\n      return null;\n    }\n  };\n\n  return (\n    <TokenContext.Provider value={{token, login, isLoggedIn, setIsLoggedIn, logout, searchByFoodName, getFoodNutritionDetails, userId, logFoodNutritionDetails, getNutritionLogByDate, loggedInUserName, getFoodByDate }}>\n      {children}\n    </TokenContext.Provider>\n  );\n};\n\nexport default TokenContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}