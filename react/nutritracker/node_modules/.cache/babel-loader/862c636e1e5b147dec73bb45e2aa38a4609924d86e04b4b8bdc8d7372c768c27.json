{"ast":null,"code":"var _jsxFileName = \"/Users/bhanu/Documents/nutritracker_react/nutritracker/src/components/custom_food/AddCustomFood.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddCustomFood = () => {\n  _s();\n  const [foodName, setFoodName] = useState('');\n  const [nutrients, setNutrients] = useState([]);\n  const [selectedNutrient, setSelectedNutrient] = useState('');\n  const [nutrientAmount, setNutrientAmount] = useState('');\n  const [availableNutrients, setAvailableNutrients] = useState([]);\n  useEffect(() => {\n    // Simulating fetching nutrients from backend\n    fetchNutrientsFromBackend().then(data => setAvailableNutrients(data)).catch(error => console.error('Error fetching nutrients:', error));\n  }, []);\n\n  // Simulated function to fetch nutrients from backend\n  const fetchNutrientsFromBackend = () => {\n    // Replace with actual fetch logic to your backend API\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const mockNutrients = [{\n          id: 1,\n          name: 'Protein'\n        }, {\n          id: 2,\n          name: 'Carbohydrates'\n        }, {\n          id: 3,\n          name: 'Fat'\n        }, {\n          id: 4,\n          name: 'Fiber'\n        }\n        // Add more nutrients as needed\n        ];\n        resolve(mockNutrients);\n      }, 1000); // Simulate delay for API response\n    });\n  };\n  const handleAddNutrient = () => {\n    if (selectedNutrient && nutrientAmount) {\n      const newNutrient = {\n        name: selectedNutrient,\n        amount: nutrientAmount\n      };\n      setNutrients([...nutrients, newNutrient]);\n      setSelectedNutrient('');\n      setNutrientAmount('');\n    }\n  };\n  const handleSaveFood = () => {\n    // Example: Send data to a backend API or save to database\n    const newFood = {\n      name: foodName,\n      nutrients: nutrients\n    };\n    console.log('Saving food:', newFood);\n    // Reset form after saving\n    setFoodName('');\n    setNutrients([]);\n    setSelectedNutrient('');\n    setNutrientAmount('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add Custom Food\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSaveFood,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Food Name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: foodName,\n          onChange: e => setFoodName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select Nutrient:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedNutrient,\n          onChange: e => setSelectedNutrient(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Nutrient\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), availableNutrients.map(nutrient => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: nutrient.name,\n            children: nutrient.name\n          }, nutrient.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Amount:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: nutrientAmount,\n          onChange: e => setNutrientAmount(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleAddNutrient,\n        children: \"Add Nutrient\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: nutrients.map((nutrient, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [nutrient.name, \": \", nutrient.amount]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Save Food\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(AddCustomFood, \"Qbi5RcNFufzx0+RBaMpgGZpkLeI=\");\n_c = AddCustomFood;\nexport default AddCustomFood;\nvar _c;\n$RefreshReg$(_c, \"AddCustomFood\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AddCustomFood","_s","foodName","setFoodName","nutrients","setNutrients","selectedNutrient","setSelectedNutrient","nutrientAmount","setNutrientAmount","availableNutrients","setAvailableNutrients","fetchNutrientsFromBackend","then","data","catch","error","console","Promise","resolve","reject","setTimeout","mockNutrients","id","name","handleAddNutrient","newNutrient","amount","handleSaveFood","newFood","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","e","target","required","map","nutrient","onClick","index","_c","$RefreshReg$"],"sources":["/Users/bhanu/Documents/nutritracker_react/nutritracker/src/components/custom_food/AddCustomFood.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst AddCustomFood = () => {\n  const [foodName, setFoodName] = useState('');\n  const [nutrients, setNutrients] = useState([]);\n  const [selectedNutrient, setSelectedNutrient] = useState('');\n  const [nutrientAmount, setNutrientAmount] = useState('');\n  const [availableNutrients, setAvailableNutrients] = useState([]);\n\n  useEffect(() => {\n    // Simulating fetching nutrients from backend\n    fetchNutrientsFromBackend()\n      .then(data => setAvailableNutrients(data))\n      .catch(error => console.error('Error fetching nutrients:', error));\n  }, []);\n\n  // Simulated function to fetch nutrients from backend\n  const fetchNutrientsFromBackend = () => {\n    // Replace with actual fetch logic to your backend API\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const mockNutrients = [\n          { id: 1, name: 'Protein' },\n          { id: 2, name: 'Carbohydrates' },\n          { id: 3, name: 'Fat' },\n          { id: 4, name: 'Fiber' },\n          // Add more nutrients as needed\n        ];\n        resolve(mockNutrients);\n      }, 1000); // Simulate delay for API response\n    });\n  };\n\n  const handleAddNutrient = () => {\n    if (selectedNutrient && nutrientAmount) {\n      const newNutrient = { name: selectedNutrient, amount: nutrientAmount };\n      setNutrients([...nutrients, newNutrient]);\n      setSelectedNutrient('');\n      setNutrientAmount('');\n    }\n  };\n\n  const handleSaveFood = () => {\n    // Example: Send data to a backend API or save to database\n    const newFood = {\n      name: foodName,\n      nutrients: nutrients\n    };\n    console.log('Saving food:', newFood);\n    // Reset form after saving\n    setFoodName('');\n    setNutrients([]);\n    setSelectedNutrient('');\n    setNutrientAmount('');\n  };\n\n  return (\n    <div>\n      <h2>Add Custom Food</h2>\n      <form onSubmit={handleSaveFood}>\n        <label>\n          Food Name: <input type=\"text\" value={foodName} onChange={(e) => setFoodName(e.target.value)} required />\n        </label>\n        <br />\n\n        <label>\n          Select Nutrient:\n          <select value={selectedNutrient} onChange={(e) => setSelectedNutrient(e.target.value)}>\n            <option value=\"\">Select Nutrient</option>\n            {availableNutrients.map(nutrient => (\n              <option key={nutrient.id} value={nutrient.name}>{nutrient.name}</option>\n            ))}\n          </select>\n        </label>\n        <br />\n\n        <label>\n          Amount:\n          <input type=\"text\" value={nutrientAmount} onChange={(e) => setNutrientAmount(e.target.value)} />\n        </label>\n        <button type=\"button\" onClick={handleAddNutrient}>Add Nutrient</button>\n        <br />\n\n        <ul>\n          {nutrients.map((nutrient, index) => (\n            <li key={index}>\n              {nutrient.name}: {nutrient.amount}\n            </li>\n          ))}\n        </ul>\n\n        <button type=\"submit\">Save Food</button>\n      </form>\n    </div>\n  );\n};\n\nexport default AddCustomFood;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}